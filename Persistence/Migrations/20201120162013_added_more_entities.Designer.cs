// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

namespace Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20201120162013_added_more_entities")]
    partial class added_more_entities
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("Domain.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Password");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Domain.Cabinet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CabinetContactId");

                    b.Property<string>("Name");

                    b.Property<int>("RegistrationCode");

                    b.HasKey("Id");

                    b.HasIndex("CabinetContactId");

                    b.ToTable("Cabinets");
                });

            modelBuilder.Entity("Domain.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Country");

                    b.Property<int>("Number");

                    b.Property<string>("Street");

                    b.Property<string>("Town");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Domain.Dog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("Code");

                    b.Property<string>("Name");

                    b.Property<int?>("OwnerId");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Dogs");
                });

            modelBuilder.Entity("Domain.DogOwner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<int?>("OwnerContactId");

                    b.Property<int?>("OwnerMedicId");

                    b.Property<string>("Password");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.HasIndex("OwnerContactId");

                    b.HasIndex("OwnerMedicId");

                    b.ToTable("DogOwners");
                });

            modelBuilder.Entity("Domain.Medic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<int?>("MedicCabinetId");

                    b.Property<string>("Password");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.HasIndex("MedicCabinetId");

                    b.ToTable("Medics");
                });

            modelBuilder.Entity("Domain.Cabinet", b =>
                {
                    b.HasOne("Domain.Contact", "CabinetContact")
                        .WithMany()
                        .HasForeignKey("CabinetContactId");
                });

            modelBuilder.Entity("Domain.Dog", b =>
                {
                    b.HasOne("Domain.DogOwner", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");
                });

            modelBuilder.Entity("Domain.DogOwner", b =>
                {
                    b.HasOne("Domain.Contact", "OwnerContact")
                        .WithMany()
                        .HasForeignKey("OwnerContactId");

                    b.HasOne("Domain.Medic", "OwnerMedic")
                        .WithMany()
                        .HasForeignKey("OwnerMedicId");
                });

            modelBuilder.Entity("Domain.Medic", b =>
                {
                    b.HasOne("Domain.Cabinet", "MedicCabinet")
                        .WithMany()
                        .HasForeignKey("MedicCabinetId");
                });
#pragma warning restore 612, 618
        }
    }
}
